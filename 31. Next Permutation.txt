/*
1. from right to left, find the longest increasing sequence, get the index of the last one. if out of bound, simply reverse the whole string and done
2. get the left index, the from left to right inside the longest (decreasing) sequence, find the last one bigger than it
3. swap these two values
4. reverse the decreasing sequence into increasing
*/
import java.util.*;
public class Solution {
    private void swap(int[] nums, int start, int end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }
    
    private void reverse(int[] nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            swap(nums, i, j);
        }
    }
    
    private int find(int[] nums, int start, int end, int target) {
        if (start == end) {
            if (nums[start] > target) {
                return start;
            }
            return start - 1;
        }
        if (start == end - 1) {
            if (nums[start] > target && nums[end] <= target) {
                return start;
            }
            if (nums[end] > target) {
                return end;
            }
            return start - 1;
        }
        int middle = (start + end) / 2;
        if (nums[middle] > target && nums[middle + 1] <= target) {
            return middle;
        }
        if (nums[middle + 1] > target) {
            return find(nums, middle + 1, end, target);
        }
        return find(nums, start, middle - 1, target);
    }
    
    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length < 2) {
            return;
        }
        int firstDecreasingIndex;
        for (firstDecreasingIndex = nums.length - 2; firstDecreasingIndex > -1; firstDecreasingIndex--) {
            if (nums[firstDecreasingIndex] < nums[firstDecreasingIndex + 1]) {
                break;
            }
        }
        if (firstDecreasingIndex == -1) {
            reverse(nums, 0, nums.length - 1);
            return;
        }
        int nextPermutationValue = nums[firstDecreasingIndex];
        firstDecreasingIndex++;
        int insertIndex = find(nums, firstDecreasingIndex, nums.length - 1, nextPermutationValue); // last index bigger than nextPermutationValue
        swap(nums, firstDecreasingIndex - 1, insertIndex);
        reverse(nums, firstDecreasingIndex, nums.length - 1);
    }
}