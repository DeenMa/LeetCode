/*
algorithm: keep a hashtable of a size k, and a left pointer that make s[left : cur] guaranteed to have within k types of chars
main:
for all chars inside string:
map.put(curChar, curOcc + 1);
while (map.size() > k) {
    map.put(s[left], occ - 1);
    if (occ == 0) {
        map.remove(s[left]);
    }
    left++;
    track size here
}
*/
public class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        if (s == null || s.length() == 0 || k == 0) {
            return 0;
        }
        int result = 0;
        int left = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            if (!map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), 1);
            } else {
                map.put(s.charAt(i), map.get(s.charAt(i)) + 1);
            }
            while (map.size() > k) {
                map.put(s.charAt(left), map.get(s.charAt(left)) - 1);
                if (map.get(s.charAt(left)) == 0) {
                    map.remove(s.charAt(left));
                }
                left++;
            }
            result = Math.max(result, i - left + 1);
        }
        return result;
    }
}