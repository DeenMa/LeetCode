/*
algorithm: o(n^2) time complexity dp
*/
public class Solution {
    public boolean canJump(int[] nums) {
        if (nums == null || nums.length < 2) { // even if the first value is 0 - in that case we are already at the end
            return true;
        }
        boolean[] dp = new boolean[nums.length];
        dp[0] = (nums[0] == 0? false : true);
        for (int i = 1; i < nums.length; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] == true && j + nums[j] >= i) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[nums.length - 1];
    }
}