    private static class CompanyStructure {
        private class Person { // contain id, rank, list of bosses, list of siblings, and list of subordinates
            int id;
            int rank;
            List<Person> bosses;
            List<Person> siblings;
            List<Person> subordinates;
            
            public Person(int id) {
                this.id = id;
                this.rank = Integer.MIN_VALUE; // this is unvisited by default
                this.bosses = new ArrayList<>();
                this.siblings = new ArrayList<>();
                this.subordinates = new ArrayList<>();
            }
        }
        
        HashMap<Integer, Person> staff;
        
        public CompanyStructure(int[][] structure) {
            staff = new HashMap<>();
            Person start = null;
            for (int[] curRelation : structure) {
                int pid0 = curRelation[0];
                if (!staff.containsKey(pid0)) {
                    Person p0 = new Person(0);
                    staff.put(pid0, p0);
                }
                int pid1 = curRelation[1];
                if (!staff.containsKey(pid1)) {
                    Person p1 = new Person(1);
                    staff.put(pid1, p1);
                }
                int relation = curRelation[2];
                Person p0 = staff.get(pid0);
                start = p0;
                Person p1 = staff.get(pid1);
                switch (relation) {
                    case 1: {
                        p0.subordinates.add(p1);
                        p1.bosses.add(p0);
                        break;
                    }
                    case 0: {
                        p0.siblings.add(p1);
                        p1.siblings.add(p0);
                        break;
                    }
                    case -1: {
                        p0.bosses.add(p1);
                        p1.subordinates.add(p0);
                        break;
                    }
                    default : {
                        throw new RuntimeException("no such relation id");
                    }
                }
            }
            start.rank = 0;
            Queue<Person> queue = new LinkedList<>();
            queue.offer(start);
            while (queue.peek() != null) {
                Person p = queue.poll();
                for (Person pBoss : p.bosses) {
                    if (pBoss.rank == Integer.MIN_VALUE) {
                        pBoss.rank = p.rank + 1;
                        queue.offer(pBoss);
                    }
                }
                for (Person pSibling : p.siblings) {
                    if (pSibling.rank == Integer.MIN_VALUE) {
                        pSibling.rank = p.rank;
                        queue.offer(pSibling);
                    }
                }
                for (Person pSubordinate : p.subordinates) {
                    if (pSubordinate.rank == Integer.MIN_VALUE) {
                        pSubordinate.rank = p.rank - 1;
                        queue.offer(pSubordinate);
                    }
                }
            }
        }
        
        public int getRelation(int pid0, int pid1) { // only return 1 (1 is 2's boss, 0 - sibling, -1 - subordinate)
            if (!staff.containsKey(pid0) || !staff.containsKey(pid1)) {
                throw new RuntimeException("cannot find such pid");
            }
            Person p0 = staff.get(pid0);
            Person p1 = staff.get(pid1);
            if (p0.rank == Integer.MIN_VALUE || p1.rank == Integer.MIN_VALUE) {
                throw new RuntimeException("rank not initialized yet");
            }
            if (p0.rank > p1.rank) {
                return 1;
            }
            if (p0.rank < p1.rank) {
                return -1;
            }
            return 0;
        }
    }
