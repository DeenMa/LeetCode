public class Solution {
    private int rob(int[] nums, int start, int end) {
        if (start == end) {
            return nums[start];
        }
        if (start == end - 1) {
            return Math.max(nums[start], nums[end]);
        }
        int[][] dp = new int[end - start + 1][2];
        dp[0][0] = 0;
        dp[0][1] = nums[start];
        dp[1][0] = nums[start];
        dp[1][1] = Math.max(nums[start], nums[start + 1]);
        for (int i = 2; i < dp.length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1]);
            dp[i][1] = Math.max(dp[i - 2][1], dp[i - 1][0]) + nums[i + start];
        }
        return Math.max(dp[dp.length - 1][0], dp[dp.length - 1][1]);
    }
    
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }
        return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));
    }
}