/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int minMeetingRooms(Interval[] intervals) {
        if (intervals == null || intervals.length == 0) {
            return 0;
        }
        Arrays.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval i1, Interval i2) {
                if (i1.start != i2.start) {
                    return i1.start - i2.start;
                }
                return i1.end - i2.end;
            }
        });
        int minRoom = 0;
        PriorityQueue<Interval> rooms = new PriorityQueue<>(intervals.length, new Comparator<Interval>() {
            public int compare(Interval i1, Interval i2) {
                return i1.end - i2.end;
            }
        });
        for (int i = 0; i < intervals.length; i++) {
            while (rooms.size() > 0 && rooms.peek().end <= intervals[i].start) {
                rooms.poll();
            }
            rooms.offer(intervals[i]);
            minRoom = Math.max(minRoom, rooms.size());
        }
        return minRoom;
    }
}