/*
algorithm: dynamic programming
optimization: since the length of the string s can be very large but the length of the longest word in dictionary is relatively small ~ 20
therefore when we are iterating j, we can only check j within the range of the word
*/
public class Solution {
    /*
    whether there is a dictionary contained subset of the string from 0 to i
    iterating: dp[i] = (for all previous trues say dp[j] is a true) contains substring(j + 1, i + 1) || substring(0, i) 
    */
    private int getMaxWordLength(Set<String> wordDict) {
        Iterator<String> i = wordDict.iterator();
        int maxWordLength = 0;
        while (i.hasNext()) {
            String cur = i.next();
            if (cur.length() > maxWordLength) {
                maxWordLength = cur.length();
            }
        }
        return maxWordLength;
    }

    public boolean wordBreak(String s, Set<String> wordDict) {
        if (s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0) {
            return false;
        }
        
        int maxWordLength = getMaxWordLength(wordDict);
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for (int i = 1; i < dp.length; i++) {
            for (int j = Math.max(0, i - maxWordLength - 1); j < i; j++) {
                if (dp[j] == false) {
                    continue;
                }
                if (wordDict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[dp.length - 1];
    }
}