    private static int binarySearch(int[] nums, int start, int end, int target) {
        while (start < end - 1) {
            int middle = (start + end) / 2;
            if (target == nums[middle]) {
                return middle;
            }
            if (target < nums[middle]) {
                end = middle - 1;
            } else {
                start = middle + 1;
            }
        }
        if (start == end) {
            if (target > nums[end]) {
                return end + 1;
            }
            return end;
        }
        if (target > nums[end]) {
            return end + 1;
        }
        if (target > nums[start]) {
            return start + 1;
        }
        return start;
    }
    
    private static int[] findCClosestFromIndex(int[] nums, int target, int c, int index) { // o(c + logn) solution
        int[] result = new int[2];
        if (index == 0) {
            result[0] = 0;
            result[1] = c - 1;
            return result;
        }
        if (index == nums.length) {
            result[0] = nums.length - c;
            result[1] = nums.length - 1;
            return result;
        }
        int right = index;
        int left = index - 1;
        if (c == 1) {
            if (target - nums[left] < nums[right] - target) {
                result[0] = left;
                result[1] = left;
            } else {
                result[0] = right;
                result[1] = right;
            }
            return result;
        }
        while (right - left + 1 < c) { // left should be >= 0 and right should be less than nums.length
            if (left < 0) {
                left = 0;
                right = c - 1;
                break;
            }
            if (right >= nums.length) {
                right = nums.length - 1;
                left = nums.length - c;
                break;
            }
            if (target - nums[left] < nums[right] - target) {
                left--;
            } else {
                right++;
            }
        }
        result[0] = left;
        result[1] = right;
        return result;
    }
    
    private static int[] findCClosest(int[] nums, int target, int c) {
        if (nums == null || nums.length == 0) {
            throw new IllegalArgumentException("nums should be non-empty");
        }
        int[] results = new int[2];
        if (c >= nums.length) {
            results[0] = 0;
            results[1] = nums.length - 1;
            return results;
        }
        int index = binarySearch(nums, 0, nums.length - 1, target);
        results = findCClosestFromIndex(nums, target, c, index);
        return results;
    }
