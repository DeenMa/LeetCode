/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private int max;
    private int longestConsecutiveUtil(TreeNode tn) {
        int curLength = 1;
        if (tn.left != null) {
            int left = longestConsecutiveUtil(tn.left);
            if (tn.val == tn.left.val - 1) {
                curLength = Math.max(curLength, left + 1);
            }
        }
        if (tn.right != null) {
            int right = longestConsecutiveUtil(tn.right);
            if (tn.val == tn.right.val - 1) {
                curLength = Math.max(curLength, right + 1);
            }
        }
        max = Math.max(max, curLength);
        return curLength;
    }
    
    public int longestConsecutive(TreeNode root) {
        max = 0;
        if (root == null) {
            return max;
        }
        longestConsecutiveUtil(root);
        return max;
    }
}