/*
algorithm: dp: o(mn) time and space; dp[i][j] means the min distance for the word1(0:i) and word2(0:j)
initialization:
dp[i][0] or dp[0][j] is i or j
recursion:
dp[i][j] = dp[i - 1][j - 1] (word1[i] == word[j])
= min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1 (word1[i] != word[j])
*/
public class Solution {
    public int minDistance(String word1, String word2) {
        if (word1 == null || word2 == null) {
            return 0;
        }
        
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        for (int i = 0; i < dp.length; i++) {
            dp[i][0] = i;
        }
        for (int j = 0; j < dp[0].length; j++) {
            dp[0][j] = j;
        }
        
        for (int i = 1; i < dp.length; i++) {
            for (int j = 1; j < dp[0].length; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1; // add one to word2, add one to word1, replace the last digit, respectively
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}