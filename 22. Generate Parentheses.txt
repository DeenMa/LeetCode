/*
blUsed: left bracket that is currently used
bM: number of left brackets that is more than right bracket
total = n
algorithm - backtracing: generateParenthesis(results, curResult, blUsed, bM, total) {
    if (blUsed == total && bM == 0) {
        include to results
    }
    newResult = curResult
    if (blUsed < total) {
        newResult.add('(')
        generateParenthesis(results, newResult, blUsed + 1, bM + 1, total);
    }
    if (bM > 0) {
        newResult.add(')')
        generateParenthesis(results, newResult, blUsed, bM - 1, total);
    }
}
*/
import java.util.*;
public class Solution {
    private void generate(List<String> results, String curResult, int blUsed, int bM, int total) {
        if (blUsed == total && bM == 0) {
            results.add(curResult);
            return;
        }
        if (blUsed < total) {
            generate(results, curResult + "(", blUsed + 1, bM + 1, total);
        }
        if (bM > 0) {
            generate(results, curResult + ")", blUsed, bM - 1, total);
        }
    }
    
    public List<String> generateParenthesis(int n) {
        List<String> results = new ArrayList<>();
        String curResult = "";
        generate(results, curResult, 0, 0, n);
        return results;
    }
}