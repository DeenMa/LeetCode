import java.util.*;
public class HitCounter {
    private class Pair {
        Integer timestamp;
        Integer occurance;
        
        public Pair(int t, int o) {
            timestamp = t;
            occurance = o;
        }
    }
    
    private Deque<Pair> queue;
    private int size;
    private final int TIME_FRAME = 300;

    /** Initialize your data structure here. */
    public HitCounter() {
        queue = new LinkedList<>();
        size = 0;
    }
    
    private void removeFirstUntilEffective(int timestamp) {
        while (queue.size() != 0 && timestamp - queue.peekFirst().timestamp >= TIME_FRAME) {
            Pair peekPair = queue.pollFirst();
            size -= peekPair.occurance;
        }
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        if (queue.size() != 0 && queue.peekLast().timestamp == timestamp) {
            queue.peekLast().occurance++;
        } else {
            Pair pair = new Pair(timestamp, 1);
            queue.offerLast(pair);
        }
        size++;
        removeFirstUntilEffective(timestamp);
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        removeFirstUntilEffective(timestamp);
        return size;
    }
}

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter obj = new HitCounter();
 * obj.hit(timestamp);
 * int param_2 = obj.getHits(timestamp);
 */