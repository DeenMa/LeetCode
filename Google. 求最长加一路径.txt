    private static int dfs(int[][] matrix, int[][] visited, int curRow, int curCol) {
        int numRows = matrix.length;
        int numCols = matrix[0].length;
        if (visited[curRow][curCol] != 0) {
            return visited[curRow][curCol];
        }
        int result = 1; // the result matrix[curRow][curCol] is going to be
        int curValue = matrix[curRow][curCol]; // 4
        if (curRow > 0 && matrix[curRow - 1][curCol] == curValue + 1) {
            result = Math.max(result, dfs(matrix, visited, curRow - 1, curCol) + 1);
        }
        if (curRow < numRows - 1 && matrix[curRow + 1][curCol] == curValue + 1) {
            result = Math.max(result, dfs(matrix, visited, curRow + 1, curCol) + 1); // dfs(., ., 0, 1) -> dfs(., ., 1, 1)
        }
        if (curCol > 0 && matrix[curRow][curCol - 1] == curValue + 1) {
            result = Math.max(result, dfs(matrix, visited, curRow, curCol - 1) + 1); // dfs(., ., 1, 1) -> dfs(., ., 1, 0)
        }
        if (curCol < numCols - 1 && matrix[curRow][curCol + 1] == curValue + 1) {
            result = Math.max(result, dfs(matrix, visited, curRow, curCol + 1) + 1); // dfs(., ., 0, 0) -> dfs(., ., 0, 1)
        }
        visited[curRow][curCol] = result;
        return result; // 1
    }
    
    public static int maxPathIncreasingByOne(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            throw new IllegalArgumentException("matrix dimension error");
        }
        int numRows = matrix.length;
        int numCols = matrix[0].length;
        int[][] visited = new int[numRows][numCols];
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                if (visited[i][j] == 0) {
                    dfs(matrix, visited, i, j);
                }
            }
        }
        int result = 0;
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < numCols; j++) {
                result = Math.max(result, visited[i][j]);
            }
        }
        return result;
    }